import fileinput

'''top10categories() returns a list of the 10 more occurred categories among all documents.
   It also generate a txt file of categories.
   The whole process is decripted during running with output messages'''


def top10categories(cwf, reuters_files):
    print('Creazione file categorie...\n')
    filenames = [
        cwf + '/all-topics-strings.lc.txt']

    with open(cwf + '/categories', 'w') as fout, fileinput.input(
            filenames) as fin:
        for line in fin:
            fout.write(line)
    print('Inserimento categorie in lista..\n')
    file = open(cwf + '/categories', 'r')
    categories = []
    parts = []
    for line in file:
        parts = line.rstrip()
        parts = line.split(' ')
        parts = [p.rstrip() for p in parts]
        categories.append(parts)
    print('Lista categorie:' + str(categories))
    print('Numero delle categorie letto da lista: ' + str(len(categories)))
    file.close()
    print('Inserimento completato')
    ###FILES####
    print('---------Inizio analisi delle occorrenze delle 10 categorie pi첫 frequenti-------')
    # CONTO QUANTE OCCORRENZE DI CIASCUNA CATEGORIA CI SONO#
    nomi = {}
    for i in range(len(categories)):
        nomi[i] = categories[i]
    print('dizionario delle categorie:\n' + str(nomi))
    conteggi = {}
    for j in range(len(categories)):
        conteggi[j] = 0
    for x in reuters_files:
        y = open(x, 'r')
        io = y.readlines()
        print('File SGML ' + str(y) + ' letto. Ricerca linea per linea in corso..')
        for line in io:
            for j in nomi.keys():
                if '<D>' + str(nomi.get(j)).rstrip("']").lstrip("['") + '</D>' in line:
                    conteggi[j] = conteggi[j] + 1
        y.close()
    print(str(conteggi))
    sorted_top10_categories = {}
    count = 0
    while count != 10:
        maxKey = 0
        maxValue = 0
        for key, value in conteggi.items():
            if value >= maxValue:
                maxKey = key
                maxValue = value
        count += 1
        del conteggi[maxKey]
        sorted_top10_categories.__setitem__(maxKey, maxValue)
    print('Dizionario delle dieci categorie pi첫 frequenti: ' + str(sorted_top10_categories))
    listaNomiCategorieTop10 = []
    for key, value in nomi.items():
        if key in sorted_top10_categories.keys():
            listaNomiCategorieTop10.append(value)
    return listaNomiCategorieTop10

'''body_extractor(docChunk) returns the main body of a document'''
def body_extractor(docChunk):
    start = docChunk.find('<BODY>')
    end = docChunk.find('</BODY>')
    return docChunk[start + 6:end - 11]


import os

''' ReutersLoadFiles loads all files from reuters21578 folder and it splits them in two main subfolders:
        -training-set
        -test-set

    It uses top10categories(...) to extract the 10 more frequent categories among all samples.

    Please ensure that everytime this module is run, files and folders that were generated by previous executions must be deleted.

        '''

def Reuters_load_files():
    current_working_folder = os.getcwd()
    docfiles = [current_working_folder + '/reuters21578/reut2-000.sgm',
                current_working_folder + '/reuters21578/reut2-001.sgm',
                current_working_folder + '/reuters21578/reut2-002.sgm',
                current_working_folder + '/reuters21578/reut2-003.sgm',
                current_working_folder + '/reuters21578/reut2-004.sgm',
                current_working_folder + '/reuters21578/reut2-005.sgm',
                current_working_folder + '/reuters21578/reut2-006.sgm',
                current_working_folder + '/reuters21578/reut2-007.sgm',
                current_working_folder + '/reuters21578/reut2-008.sgm',
                current_working_folder + '/reuters21578/reut2-009.sgm',
                current_working_folder + '/reuters21578/reut2-010.sgm',
                current_working_folder + '/reuters21578/reut2-011.sgm',
                current_working_folder + '/reuters21578/reut2-012.sgm',
                current_working_folder + '/reuters21578/reut2-013.sgm',
                current_working_folder + '/reuters21578/reut2-014.sgm',
                current_working_folder + '/reuters21578/reut2-015.sgm',
                current_working_folder + '/reuters21578/reut2-016.sgm',
                current_working_folder + '/reuters21578/reut2-018.sgm',
                current_working_folder + '/reuters21578/reut2-019.sgm',
                current_working_folder + '/reuters21578/reut2-020.sgm',
                current_working_folder + '/reuters21578/reut2-021.sgm']
    print(
        'Analizzo i file per controllare quali sono le 10 categorie pi첫 frequenti:(potrebbe richieder qualche minuto)')

    listaNomiCategorieTop10 = top10categories(current_working_folder, docfiles)

    print('lista dei tag riferiti alle 10 categorie pi첫 frequenti:')
    for y in listaNomiCategorieTop10:
        print('<D>' + str(y).rstrip("']").lstrip("['") + '</D>')

    print('Organizzo file in cartelle:')

    for x in docfiles:
        io = open(x, 'r')
        strr = io.read()
        docs = strr.split("</REUTERS>")
        for sample in docs:
            if any('<D>' + str(y).rstrip("']").lstrip("['") + '</D>' in sample for y in listaNomiCategorieTop10):
                if not os.path.exists(current_working_folder + "/data-set"):
                    os.makedirs(current_working_folder + "/data-set")
                if 'LEWISSPLIT="TRAIN"' in sample and 'TOPICS="YES"' in sample:
                    if not os.path.exists(current_working_folder + "/data-set/training-set"):
                        os.makedirs(current_working_folder + "/data-set/training-set")
                    for y in listaNomiCategorieTop10:
                        if '<D>' + str(y).rstrip("']").lstrip("['") + '</D>' in sample:
                            if not os.path.exists(current_working_folder + "/data-set/training-set/" + str(y).rstrip(
                                    "']").lstrip("['")):
                                os.makedirs(
                                    current_working_folder + "/data-set/training-set/" + str(y).rstrip("']").lstrip(
                                        "['"))
                            os.chdir(
                                current_working_folder + "/data-set/training-set/" + str(y).rstrip("']").lstrip("['"))
                            indexTitle = sample.index("NEWID=")
                            endTitle = sample.index('">')
                            title = '0' + sample[indexTitle + 7:endTitle]
                            body = body_extractor(sample)
                            output = open(title + '.txt', 'w')
                            output.write(sample)
                elif 'LEWISSPLIT="TEST"' in sample and 'TOPICS="YES"' in sample:
                    if not os.path.exists(current_working_folder + "/data-set/test-set"):
                        os.makedirs(current_working_folder + "/data-set/test-set")
                    for y in listaNomiCategorieTop10:
                        if '<D>' + str(y).rstrip("']").lstrip("['") + '</D>' in sample:
                            if not os.path.exists(current_working_folder + "/data-set/test-set/" + str(y).rstrip(
                                    "']").lstrip("['")):
                                os.makedirs(
                                    current_working_folder + "/data-set/test-set/" + str(y).rstrip("']").lstrip("['"))
                            os.chdir(current_working_folder + "/data-set/test-set/" + str(y).rstrip("']").lstrip("['"))
                            indexTitle = sample.index("NEWID=")
                            endTitle = sample.index('">')
                            title = '0' + sample[indexTitle + 7:endTitle]
                            body = body_extractor(sample)
                            output = open(title + '.txt', 'w')
                            output.write(body)
    print('Organizzazione in cartelle completata.')